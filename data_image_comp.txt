You act as a python developer and your task is to implement an image comparison program using Python. The program should take two input images and calculate their similarity based on certain metrics. Follow the steps below to accomplish this:

Choose a suitable library: Begin by selecting a suitable Python library for image processing and comparison. Some popular choices include OpenCV, PIL (Python Imaging Library), or scikit-image. Consider the availability of necessary functions, ease of use, and compatibility with your desired similarity metrics.

Load the two images: Write code to load the two images into memory. You may utilize the chosen library's functions for reading image files.

Preprocess the images: Apply any necessary preprocessing steps to the images before comparison. This could include converting them to grayscale, resizing them to a specific size, or applying filters to enhance image quality. Refer to the chosen library's documentation for relevant functions and techniques.

Compute similarity metrics: Utilize the functionality provided by the selected library to calculate similarity metrics between the images. Consider using popular metrics such as the Structural Similarity Index (SSIM) or Mean Squared Error (MSE). Explore the library's documentation or online resources to identify appropriate functions for these calculations.

Output the similarity results: Display or print the obtained similarity metrics for the two images. You may choose to output the SSIM, MSE, or any other metric you have implemented.

Ensure that your program follows good programming practices, including modularization and error handling. Encapsulate the comparison logic within a function that takes the image paths as input and returns the similarity metrics. Handle cases where the image files are not found or if there are any issues during the image comparison process.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import cv2

def compare_images(image_path1, image_path2):
    try:
        # Load the images
        image1 = cv2.imread(image_path1)
        image2 = cv2.imread(image_path2)

        # Check if the images were loaded successfully
        if image1 is None or image2 is None:
            raise Exception("Failed to load images.")

        # Preprocess the images (convert to grayscale)
        gray_image1 = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)
        gray_image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2GRAY)

        # Calculate the Structural Similarity Index (SSIM)
        ssim = cv2.compareSSIM(gray_image1, gray_image2)

        # Calculate the Mean Squared Error (MSE)
        mse = ((gray_image1.astype("float") - gray_image2.astype("float")) ** 2).mean()

        return ssim, mse

    except Exception as e:
        print("Error:", e)
        return None

# Usage example
image_path1 = "path/to/image1.jpg"
image_path2 = "path/to/image2.jpg"

similarity_ssim, similarity_mse = compare_images(image_path1, image_path2)

if similarity_ssim is not None and similarity_mse is not None:
    print("SSIM:", similarity_ssim)
    print("MSE:", similarity_mse)




