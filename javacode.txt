// User.java
public class User {
    private String name;
    private String email;
    private String password;
    // constructor, getters, and setters
}

// UserService.java
public interface UserService {
    User addUser(User user);
    List<User> getAllUsers();
    User getUserById(String userId);
    User updateUser(String userId, User updatedUser);
    void deleteUser(String userId);
}

// UserServiceImpl.java
@Service
public class UserServiceImpl implements UserService {

    private static final String BASE_URL = "http://example.com/users";

    private RestTemplate restTemplate;

    public UserServiceImpl() {
        this.restTemplate = new RestTemplate();
    }

    @Override
    public User addUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(BASE_URL, user, User.class);
        return response.getBody();
    }

    @Override
    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(BASE_URL, User[].class);
        return Arrays.asList(response.getBody());
    }

    @Override
    public User getUserById(String userId) {
        String url = BASE_URL + "/" + userId;
        ResponseEntity<User> response = restTemplate.getForEntity(url, User.class);
        return response.getBody();
    }

    @Override
    public User updateUser(String userId, User updatedUser) {
        String url = BASE_URL + "/" + userId;
        restTemplate.put(url, updatedUser);
        return updatedUser;
    }

    @Override
    public void deleteUser(String userId) {
        String url = BASE_URL + "/" + userId;
        restTemplate.delete(url);
    }
}

// UserController.java
@RestController
@RequestMapping("/users")
public class UserController {

    private UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    public ResponseEntity<User> addUser(@RequestBody User user) {
        User addedUser = userService.addUser(user);
        return ResponseEntity.ok(addedUser);
    }

    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }

    @GetMapping("/{userId}")
    public ResponseEntity<User> getUserById(@PathVariable String userId) {
        User user = userService.getUserById(userId);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/{userId}")
    public ResponseEntity<User> updateUser(@PathVariable String userId, @RequestBody User updatedUser) {
        User user = userService.getUserById(userId);
        if (user != null) {
            User updated = userService.updateUser(userId, updatedUser);
            return ResponseEntity.ok(updated);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{userId}")
    public ResponseEntity<Void> deleteUser(@PathVariable String userId) {
        User user = userService.getUserById(userId);
        if (user != null) {
            userService.deleteUser(userId);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}

// Application.java
@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
